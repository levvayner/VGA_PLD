Name     VGATiming;
PartNo   ATF1504AS;
Date     03/13/2025;  /* Updated to current date */
Revision 02;          /* Updated revision */
Designer Lev;
Company  Vayner Systems;
Assembly None;
Location None;  
Device   f1504ispplcc44;

PROPERTY ATMEL { jtag=on }; /* This keeps the JTAG pins on after programming */
PROPERTY ATMEL { TMS_pullup=on };
PROPERTY ATMEL { TDI_pullup=on };
PROPERTY ATMEL { Preassign=keep }; /* This forces the Atmel Fitter to use the pin assignments you specify. */

/* Pin Declarations */
PIN 2   = CLK;         /* Clock input (40 MHz) */
PIN [4..6,8,9,11,12,14,16,17]   =  [HQ0..HQ9];   /* 10-bit horizontal counter outputs */
PIN [18..21,24..29] =  [VQ0..VQ9];   /* 10-bit vertical counter outputs */
PIN 31  = HSYNC;       /* Horizontal sync output */
PIN 33  = VSYNC;       /* Vertical sync output */
PIN 34  = H_VIDEO_EN;  /* Horizontal Video enable signal */
PIN 36  = V_VIDEO_EN;  /* Vertical Video enable signal (corrected pin conflict) */
PIN 37  = VIDEO_EN;    /* Video enable signal (corrected pin conflict) */

/* Declare nodes for state machine */
PINNODE = [HS3..0];
PINNODE = [VS3..0];

/* Declarations and Intermediate Variable Definitions */
FIELD HCounter =    [HQ9..HQ0];    /* Horizontal counter */
FIELD VCounter =    [VQ9..VQ0];    /* Vertical counter */
FIELD HState =      [HS3..0];      /* Horizontal state machine */
FIELD VState =      [VS3..0];      /* Vertical state machine */

/* VGA 800x600@60Hz Timing Parameters (40 MHz clock) */
/* Horizontal Timing Constants */
$DEFINE H_PULSE         'd'128  /* Horizontal sync pulse: 3.2us */
$DEFINE H_BP            'd'88   /* Back porch: 2.2us */
$DEFINE H_ACTIVE        'd'800  /* Active video: 20us */
$DEFINE H_FP            'd'40   /* Front porch: 1us */
$DEFINE H_TOTAL         'd'1056 /* Total pixels per line */

$DEFINE H_BP_TO_ACTIVE  'd'215  /* Count when we transition from back porch to active (H_PULSE + H_BP - 1) */
$DEFINE H_ACTIVE_TO_FP  'd'1015 /* Count when we transition from active to front porch (H_PULSE + H_BP + H_ACTIVE - 1) */
$DEFINE H_RESET         'd'1055 /* Count when we reset horizontal counter (H_TOTAL - 1) */

/* Vertical Timing Constants */
$DEFINE V_PULSE         'd'4    /* Vertical sync pulse: 4 lines */
$DEFINE V_BP            'd'23   /* Back porch: 23 lines */
$DEFINE V_ACTIVE        'd'600  /* Active video: 600 lines */
$DEFINE V_FP            'd'1    /* Front porch: 1 line */
$DEFINE V_TOTAL         'd'628  /* Total lines per frame */

$DEFINE V_BP_TO_ACTIVE  'd'26   /* Count when we transition from back porch to active (V_PULSE + V_BP - 1) */
$DEFINE V_ACTIVE_TO_FP  'd'626  /* Count when we transition from active to front porch (V_PULSE + V_BP + V_ACTIVE - 1) */
$DEFINE V_RESET         'd'627  /* Count when we reset vertical counter (V_TOTAL - 1) */

/* State Machine Definitions */
SEQUENCE HState {
    PRESENT 0 /* HSYNC Pulse */
        DEFAULT NEXT 1
        OUT HSYNC;
    PRESENT 1 /* Back Porch */
        IF HCounter:H_BP_TO_ACTIVE NEXT 2;
    PRESENT 2 /* Active Video */
        IF HCounter:H_ACTIVE_TO_FP NEXT 3
        OUT H_VIDEO_EN;
    PRESENT 3 /* Front Porch */
        IF HCounter:H_RESET NEXT 0;
}

SEQUENCE VState {
    PRESENT 0 /* VSYNC Pulse */
        DEFAULT NEXT 1
        OUT VSYNC;
    PRESENT 1 /* Back Porch */
        IF VCounter:V_BP_TO_ACTIVE NEXT 2;
    PRESENT 2 /* Active Video */
        IF VCounter:V_ACTIVE_TO_FP NEXT 3
        OUT V_VIDEO_EN;
    PRESENT 3 /* Front Porch */
        IF VCounter:V_RESET NEXT 0;
}

/* Logic Equations */
VIDEO_EN.D = H_VIDEO_EN & V_VIDEO_EN;

/* Horizontal Clock - counting */
HQ0.D = !HQ0;           /* Bit 0 toggles every clock */
HQ1.D = HQ1 $ HQ0;      /* Bit 1 toggles when HQ0=1 */
HQ2.D = HQ2 $ (HQ1 & HQ0);
HQ3.D = HQ3 $ (HQ2 & HQ1 & HQ0);
HQ4.D = HQ4 $ (HQ3 & HQ2 & HQ1 & HQ0);
HQ5.D = HQ5 $ (HQ4 & HQ3 & HQ2 & HQ1 & HQ0);
HQ6.D = HQ6 $ (HQ5 & HQ4 & HQ3 & HQ2 & HQ1 & HQ0);
HQ7.D = HQ7 $ (HQ6 & HQ5 & HQ4 & HQ3 & HQ2 & HQ1 & HQ0);
HQ8.D = HQ8 $ (HQ7 & HQ6 & HQ5 & HQ4 & HQ3 & HQ2 & HQ1 & HQ0);
HQ9.D = HQ9 $ (HQ8 & HQ7 & HQ6 & HQ5 & HQ4 & HQ3 & HQ2 & HQ1 & HQ0);

/* Vertical Clock - counting */
VQ0.D = !VQ0;           /* Bit 0 toggles every clock */
VQ1.D = VQ1 $ VQ0;      /* Bit 1 toggles when VQ0=1 */
VQ2.D = VQ2 $ (VQ1 & VQ0);
VQ3.D = VQ3 $ (VQ2 & VQ1 & VQ0);
VQ4.D = VQ4 $ (VQ3 & VQ2 & VQ1 & VQ0);
VQ5.D = VQ5 $ (VQ4 & VQ3 & VQ2 & VQ1 & VQ0);
VQ6.D = VQ6 $ (VQ5 & VQ4 & VQ3 & VQ2 & VQ1 & VQ0);
VQ7.D = VQ7 $ (VQ6 & VQ5 & VQ4 & VQ3 & VQ2 & VQ1 & VQ0);
VQ8.D = VQ8 $ (VQ7 & VQ6 & VQ5 & VQ4 & VQ3 & VQ2 & VQ1 & VQ0);
VQ9.D = VQ9 $ (VQ8 & VQ7 & VQ6 & VQ5 & VQ4 & VQ3 & VQ2 & VQ1 & VQ0);

/* Clock Enable */
HSYNC.CK = CLK;
VSYNC.CK = CLK;
HCounter.CK = CLK;
VIDEO_EN.CK = CLK;
V_VIDEO_EN.CK = CLK;
H_VIDEO_EN.CK = CLK;
HState.CK = CLK;
VState.CK = HCounter:H_RESET;


/* Vertical counter clock */
VCounter.CK = HCounter:H_RESET; 

/* Reset conditions */
HCounter.AR = HCounter:H_RESET;
VCounter.AR = VCounter:V_RESET;